<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
               xmlns:s="library://ns.adobe.com/flex/spark"
               xmlns:mx="library://ns.adobe.com/flex/mx"
               xmlns:components="com.robotlegs.demos.robotlegsincremental.views.components.*"
               preinitialize="application_preinitializeHandler(event)"
               initialize="application_initializeHandler(event)"
               creationComplete="application_creationCompleteHandler(event)"
               addedToStage="application_addedToStageHandler(event)"
               updateComplete="application_updateCompleteHandler(event)"
               applicationComplete="application_applicationCompleteHandler(event)"
               name="ContextView">
    <fx:Script>
        <![CDATA[
            import com.robotlegs.demos.robotlegsincremental.utils.SomeParser;
            import mx.collections.ArrayCollection;
            import mx.events.FlexEvent;

            protected static const DEMO_NUMBER:String="Without Robotlegs - Simple URL Request";
            protected static const DEMO_TITLE:String="Tracking the Start-Up Process of a Flex Application";
			protected static const XML_URL:String="http://localhost/robotlegs-incremental-resources/xml/SomeXML.xml"; //change it to your path

            protected var urlLoader:URLLoader;

            /* access resources */
            protected function accessResources():void
            {
                trace("[Flex] ContextView.accessResources() urlLoader.addEventListener(Event.COMPLETE, onDataReceived);");
                var urlRequest:URLRequest=new URLRequest(XML_URL);
                urlLoader=new URLLoader();
                urlLoader.dataFormat=URLLoaderDataFormat.TEXT;

                registerListeners();

                urlLoader.load(urlRequest);
            }

            protected function registerListeners():void
            {
                urlLoader.addEventListener(Event.COMPLETE, onDataReceived);
                urlLoader.addEventListener(IOErrorEvent.IO_ERROR, IOErrorHandler);
                urlLoader.addEventListener(IOErrorEvent.NETWORK_ERROR, IOErrorHandler);
                urlLoader.addEventListener(IOErrorEvent.VERIFY_ERROR, IOErrorHandler);
                urlLoader.addEventListener(IOErrorEvent.DISK_ERROR, IOErrorHandler);
                urlLoader.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
                //urlLoader.addEventListener(HTTPStatusEvent.HTTP_STATUS, httpStatusHandler);
            }

            protected function unregisterListeners():void
            {
                urlLoader.removeEventListener(Event.COMPLETE, onDataReceived);
                urlLoader.removeEventListener(IOErrorEvent.IO_ERROR, IOErrorHandler);
                urlLoader.removeEventListener(IOErrorEvent.NETWORK_ERROR, IOErrorHandler);
                urlLoader.removeEventListener(IOErrorEvent.VERIFY_ERROR, IOErrorHandler);
                urlLoader.removeEventListener(IOErrorEvent.DISK_ERROR, IOErrorHandler);
                urlLoader.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
                //urlLoader.removeEventListener(HTTPStatusEvent.HTTP_STATUS, httpStatusHandler);
            }

            protected function onDataReceived(event:Event):void
            {
				unregisterListeners();
                var parser:SomeParser=new SomeParser();
                var someParsedResult:ArrayCollection=parser.resultsAsArrayCollection(event.target.data);
                trace("[Flex] ContextView.onDataReceived(event) contextViewList.dataProvider=someParsedResult");
                contextViewList.dataProvider=someParsedResult;
                trace("[Flex] ContextView.onDataReceived(event) someViewList.setListDataProvider(someParsedResult)");
                someViewList.setListDataProvider(someParsedResult);
            }

            protected function setListDataProvider(dataProvider:ArrayCollection):void
            {
                trace("[Flex] ContextView.setListDataProvider(dataProvider) <<<<<<<<<<<<<<<<<");
                contextViewList.dataProvider=dataProvider;
            }

            protected function IOErrorHandler(event:IOErrorEvent):void
            {
                trace("[Flex] ContextView.onIOError(event) " + event.text);
                onServiceError(event.text);
            }

            protected function securityErrorHandler(event:SecurityErrorEvent):void
            {
                trace("[Flex] ContextView.securityErrorHandler: " + event.text);
                onServiceError(event.text);
            }

            protected function httpStatusHandler(event:HTTPStatusEvent):void
            {
                trace("[Flex] ContextView.httpStatusHandler: " + event.toString());
            }

            protected function onServiceError(message:String):void
            {
				unregisterListeners();
                urlLoader=null;
                someErrorView.visible=true;
                someErrorView.alertMessagesText.text=message;
            }

            /* traces flex events */
            protected function application_preinitializeHandler(event:FlexEvent):void
            {
                trace("[Flex] ContextView/Application on FlexEvent.PREINITIALIZE");
            }

            protected function application_initializeHandler(event:FlexEvent):void
            {
                trace("[Flex] ContextView/Application on FlexEvent.INITIALIZE");
            }

            /*===============> service call */
            protected function application_creationCompleteHandler(event:FlexEvent):void
            {
                trace("[Flex] ContextView/Application on FlexEvent.CREATION_COMPLETE");
                accessResources();
            }

            protected function application_addedToStageHandler(event:Event):void
            {
                trace("[Flex] ContextView/Application on Event.ADDED_TO_STAGE");
            }

            protected function application_updateCompleteHandler(event:FlexEvent):void
            {
                trace("[Flex] ContextView/Application on FlexEvent.UPDATE_COMPLETE");
            }

            protected function contextViewList_addedToStageHandler(event:Event):void
            {
                trace("[Flex] ContextView.contextViewList on Event.ADDED_TO_STAGE");
            }

            protected function contextViewList_creationCompleteHandler(event:FlexEvent):void
            {
                trace("[Flex] ContextView.contextViewList on FlexEvent.CREATION_COMPLETE");
            }

            protected function application_applicationCompleteHandler(event:FlexEvent):void
            {
                trace("[Flex] ContextView.application_applicationCompleteHandler on FlexEvent.APPLICATION_COMPLETE");
            }

            protected function someViewList_creationCompleteHandler(event:FlexEvent):void
            {
                trace("[Flex] ContextView.someViewList on FlexEvent.CREATION_COMPLETE");
            }

            protected function someViewList_addedToStageHandler(event:Event):void
            {
                trace("[Flex] ContextView.someViewList on Event.ADDED_TO_STAGE");
            }
        ]]>
    </fx:Script>
    <s:DropDownList id="contextViewList"
                    x="17"
                    y="57"
                    width="228"
                    prompt="contextViewList"
                    labelField="somename"
                    addedToStage="contextViewList_addedToStageHandler(event)"
                    creationComplete="contextViewList_creationCompleteHandler(event)"/>
    <components:SomeView id="someViewList"
                         x="277"
                         y="57"
                         addedToStage="someViewList_addedToStageHandler(event)"
                         creationComplete="someViewList_creationCompleteHandler(event)"/>
    <components:SomeErrorView id="someErrorView"
                              horizontalCenter="0"
                              y="200"
                              visible="false"/>
    <s:HGroup y="10"
              height="25"
              gap="20"
              horizontalCenter="0"
              verticalAlign="middle">
        <s:Label id="demoTitle"
                 text="{DEMO_TITLE}"/>
        <s:Label id="demoNumber"
                 fontSize="23"
                 fontWeight="bold"
                 text="Step: {DEMO_NUMBER}"/>
    </s:HGroup>
</s:Application>
